Drawson {
  Start = StatementList

  StatementList = Statement*
      
  Statement 
    = WhileLoop
    | ForLoop
    | ClearStatement
    | SetStatement
    | DrawStatement
    | FillStatement
    | DefinitionStatement
    | AssignmentStatement
    | DefinitionWithAssignmentStatement
    | Comment

  WhileLoop = whileKeyword "(" ConditionalStatement ")" LoopBody
  
  whileKeyword = "while"

  ForLoop = forKeyword identifier inKeyword ArithmeticStatement ArithmeticStatement LoopBody

  forKeyword = "for"
  inKeyword = "in"

  LoopBody = "{" StatementList "}"

  DefinitionStatement = variableKeyword identifier ";"

  AssignmentStatement = identifier "=" ArithmeticStatement ";"

  DefinitionWithAssignmentStatement = variableKeyword identifier "=" ArithmeticStatement ";"

  variableKeyword = "let"

  ClearStatement = "clear" ";"

  SetStatement = "set" SetDefinition ";" 

  SetDefinition 
    = "color" colorValue
    | "paint" colorValue
    | "thickness" ArithmeticStatement
      
  DrawStatement = drawKeyword ObjectDefinition ";"

  drawKeyword = "draw"

  FillStatement = fillKeyword FillableObjectDefinition ";"

  fillKeyword = "fill"

  ObjectDefinition
    = FillableObjectDefinition
    | lineObjectKeyword ArithmeticStatement ArithmeticStatement ArithmeticStatement ArithmeticStatement -- line_definition
  
  lineObjectKeyword = "line"

  FillableObjectDefinition
    = circleObjectKeyword ArithmeticStatement ArithmeticStatement ArithmeticStatement -- circle_definition
    | rectObjectKeyword ArithmeticStatement ArithmeticStatement ArithmeticStatement ArithmeticStatement -- rect_definition

  circleObjectKeyword = "circle"
  rectObjectKeyword = "rect"

  ArithmeticStatement
    = AddStatement

  AddStatement
    = AddStatement "+" MulStatement -- plus
    | AddStatement "-" MulStatement -- minus
    | MulStatement

  MulStatement
    = MulStatement "*" PriStatement -- times
    | MulStatement "/" PriStatement -- divide
    | PriStatement

  PriStatement
    = "(" ArithmeticStatement ")" -- paren
    | "+" PriStatement -- pos
    | "-" PriStatement -- neg
    | identifier -- var
    | integer

  ConditionalStatement
    = OrStatement

  OrStatement
    = OrStatement "||" AndStatement -- exp
    | AndStatement

  AndStatement
    = AndStatement "&&" LogicalExp -- exp
    | LogicalExp

  LogicalExp
    = "!" LogicalExp -- not
    | RelationStatement -- relation
    | "(" ConditionalStatement ")" -- paren
    | boolean -- bool

  boolean
    = "true"
    | "false"

  RelationStatement
    = ArithmeticStatement ">" ArithmeticStatement -- gt
    | ArithmeticStatement "<" ArithmeticStatement -- lt
    | ArithmeticStatement ">=" ArithmeticStatement -- geq
    | ArithmeticStatement "<=" ArithmeticStatement -- leq
    | ArithmeticStatement "==" ArithmeticStatement -- eq
    | ArithmeticStatement "!=" ArithmeticStatement -- neq

  Comment = commentStart notEndOfComment* commentEnd
  commentStart = "/*"
  notEndOfComment= ~commentEnd any
  commentEnd = "*/"

  identifier = ~keyword ~boolean letter alnum*

  keyword
    = drawKeyword 
    | fillKeyword 
    | circleObjectKeyword 
    | rectObjectKeyword 
    | lineObjectKeyword

  colorValue = "#" alnum alnum alnum alnum alnum alnum

  integer
    = nonZeroDigit digit* -- number
    | "0" -- zero

  nonZeroDigit = ~"0" digit
}